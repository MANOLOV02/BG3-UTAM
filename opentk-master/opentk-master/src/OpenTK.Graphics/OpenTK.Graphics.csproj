<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netcoreapp3.1</TargetFrameworks>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <RootNamespace>OpenTK.Graphics</RootNamespace>
  </PropertyGroup>

  <!-- This article is useful for generating code: -->
  <!-- https://learn.microsoft.com/en-au/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022 -->

  <ItemGroup>
    <ProjectReference Include="..\OpenTK.Core\OpenTK.Core.csproj" />
    <ProjectReference Include="..\OpenTK.Mathematics\OpenTK.Mathematics.csproj" />

    <!-- Add a project reference here so that the Generator.Bind project is built, 
    but make sure that we don't pass framework configs to it and exlude all assets from the final build. -->
    <ProjectReference Include="..\Generator.Bind\Generator.Bind.csproj" 
                      SkipGetTargetFrameworkProperties="true" 
                      UndefineProperties="TargetFramework" 
                      ReferenceOutputAssembly="false" 
                      ExcludeAssets="all" />

    <!-- FIXME: Fix error MSB4057: The target "GetTargetPath" does not exist in the project -->
    <!-- Add a project reference here so that the Generator.Rewrite project is built, 
    but make sure that we don't pass framework configs to it and exlude all assets from the final build. -->
    <ProjectReference Include="..\Generator.Rewrite\Generator.Rewrite.csproj" 
                      SkipGetTargetFrameworkProperties="true" 
                      UndefineProperties="TargetFramework" 
                      ReferenceOutputAssembly="false" 
                      ExcludeAssets="all" />
  </ItemGroup>

  <!-- Define what files we depend on and which files are generated -->
  <ItemGroup>
    <GLSpec Include="..\gl.xml" />
    <GeneratedFiles Include="ES11/ES11.cs;ES11/ES11Enums.cs;ES20/ES20.cs;ES20/ES20Enums.cs;ES30/ES30.cs;ES30/ES30Enums.cs;OpenGL2/GL.cs;OpenGL2/GLEnums.cs;OpenGL4/GL4.cs;OpenGL4/GL4Enums.cs" Exclude="**/Helper.cs" />
    <!-- We use this to use as an input for the Generate bindings step, this means that if the we (msbuild) rebuilds the Generator.Bind we will rerun the generator -->
    <GeneratorExe Include="..\Generator.Bind\bin\$(Configuration)\netcoreapp3.1\Bind.exe" Condition="'$(OS)' == 'Windows_NT'" />
    <GeneratorExe Include="..\Generator.Bind\bin\$(Configuration)\netcoreapp3.1\Bind" Condition="'$(OS)' != 'Windows_NT'" />
  </ItemGroup>

  <!--  'DispatchToInnerBuilds' is so that this target is only run once in contrast to task that run after 'PreBuildEvent' which get run multiple times for each target framework  -->
  <!-- The downloaded gl.xml file isn't acually used by the build, it needs to be processed by Generator.Convert first, -->
  <!-- but we don't do this here as it's been a long time since the bindings where generated directly from gl.xml and it has diverged quite a bit. -->
  <Target Name="Download gl xml" BeforeTargets="DispatchToInnerBuilds">
    <!-- Here we check if gl.xml exists, if it doesn't we download the file. -->
    <DownloadFile SourceUrl="https://raw.githubusercontent.com/frederikja163/OpenGL-Registry/master/xml/gl.xml" DestinationFolder=".." SkipUnchangedFiles="true" Condition="Exists('../gl.xml') == 'false'" />
  </Target>

  <!-- After we've downloaded the spec file we can generate the bindings if needed. -->
  <Target Name="Generate bindings" DependsOnTargets="Download gl xml" BeforeTargets="DispatchToInnerBuilds;BeforeBuild">

    <!-- Build the Generator.Bind project directly, this is run before we resolve project references. -->
    <MSBuild Projects="..\Generator.Bind\Generator.Bind.csproj" Targets="Build" Properties="TargetFramework=netcoreapp3.1" />

    <!-- Use the solution presented here https://github.com/dotnet/msbuild/issues/2781#issuecomment-350118208 -->
    <!-- The idea is to set TargetFramework to "once" for all target frameworks, msbuild will not execute the same project with the same settings twice. -->
    <!-- This way we can make sure that we only generate the bindings once for this csproj file. -->
    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Generate bindings inner" Properties="TargetFramework=once" />
  </Target>

  <!-- By setting Inputs and Outputs msbuild decides when we need to generate the bindings. -->
  <Target Name="Generate bindings inner" Inputs="@(GLSpec);@(GeneratorExe)" Outputs="@(GeneratedFiles)">
    <Message Text="Generating bindings..." Importance="high" />

    <!-- Run the exe directly to avoid dotnet rebuilding anything. -->
    <Exec Command=".\src\Generator.Bind\bin\$(Configuration)\netcoreapp3.1\Bind.exe" WorkingDirectory="../../" Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command=".\src\Generator.Bind\bin\$(Configuration)\netcoreapp3.1\Bind" WorkingDirectory="../../" Condition="'$(OS)' != 'Windows_NT'" />

    <Message Text="Generated bindings!" Importance="high" />

    <ItemGroup>
      <Compile Remove="@(GeneratedFiles)" />
      <Compile Include="@(GeneratedFiles)" />
      <!-- For clean to work properly -->
      <FileWrites Include="@(GeneratedFiles)" />
    </ItemGroup>
  </Target>

  <!-- After we have compiled the dll we run the rewriter -->
  <Target Name="Rewrite" BeforeTargets="PostBuildEvent">
    <Message Text="Rewriting src/OpenTK.Graphics/bin/$(Configuration)/$(TargetFramework)" Importance="high" />
    <Exec Command=".\src\Generator.Rewrite\bin\$(Configuration)\netcoreapp3.1\Rewrite.exe -a ./src/OpenTK.Graphics/bin/$(Configuration)/$(TargetFramework)/OpenTK.Graphics.dll" WorkingDirectory="../../" StandardOutputImportance="high" StandardErrorImportance="high" Condition="'$(OS)' == 'Windows_NT'" />
    <Exec Command=".\src\Generator.Rewrite\bin\$(Configuration)\netcoreapp3.1\Rewrite -a ./src/OpenTK.Graphics/bin/$(Configuration)/$(TargetFramework)/OpenTK.Graphics.dll" WorkingDirectory="../../" StandardOutputImportance="high" StandardErrorImportance="high" Condition="'$(OS)' != 'Windows_NT'" />
    <Message Text="Rewrote src/OpenTK.Graphics/bin/$(Configuration)/$(TargetFramework)" Importance="high" />
  </Target>

  <Import Project="..\..\props\common.props" />
  <Import Project="..\..\props\nuget-common.props" />

</Project>
